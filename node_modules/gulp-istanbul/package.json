{
  "name": "gulp-istanbul",
  "version": "0.2.2",
  "description": "Istanbul unit test coverage plugin for gulp.",
  "keywords": [
    "gulpplugin",
    "coverage",
    "istanbul",
    "unit test"
  ],
  "homepage": "https://github.com/SBoudrias/gulp-istanbul",
  "bugs": {
    "url": "https://github.com/SBoudrias/gulp-istanbul/issues"
  },
  "author": {
    "name": "Simon Boudrias",
    "email": "admin@simonboudrias.com",
    "url": "https://github.com/SBoudrias"
  },
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/SBoudrias/gulp-istanbul.git"
  },
  "scripts": {
    "pretest": "jshint index.js ./test/.",
    "test": "mocha -R spec"
  },
  "dependencies": {
    "gulp-util": "^2.2.14",
    "istanbul": "^0.2.8",
    "lodash": "^2.4.1",
    "through2": "^0.4.1"
  },
  "devDependencies": {
    "gulp-mocha": "^0.4.1",
    "gulp": "^3.6.2",
    "jshint": "^2.5.0",
    "mocha": "^1.18.2",
    "rimraf": "^2.2.8"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "readme": "gulp-istanbul [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][depstat-image]][depstat-url]\n===========================\n\n[Istanbul][istanbul] unit test coverage plugin for [gulp][gulp].\n\nWorks on top of any Node.js unit test framework.\n\nInstallation\n---------------\n\n```shell\nnpm install --save-dev gulp-istanbul\n```\n\nExample\n---------------\n\nThen, add it to your `gulpfile.js`:\n\n```javascript\nvar istanbul = require('gulp-istanbul');\nvar mocha = require('gulp-mocha'); // Using mocha here, but any test framework will work\n\ngulp.task('test', function (cb) {\n  gulp.src(['lib/**/*.js', 'main.js'])\n    .pipe(istanbul()) // Covering files\n    .on('finish', function () {\n      gulp.src(['test/*.js'])\n        .pipe(mocha())\n        .pipe(istanbul.writeReports()) // Creating the reports after tests runned\n        .on('end', cb);\n    });\n});\n```\n\nAPI\n--------------\n\n### istanbul(opt)\n\nInstrument files passed in the stream.\n\n#### opt\nType: `Object` (optional)\n```js\n{\n  coverageVariable: 'someVariable',\n  ...other Instrumeter options...\n}\n```\n\n##### coverageVariable\nType: `String` (optional)\nDefault: `'$$cov_' + new Date().getTime() + '$$'`\n\nThe global variable istanbul uses to store coverage\n\nSee also:\n- [istanbul coverageVariable][istanbul-coverage-variable]\n- [SanboxedModule][sandboxed-module-coverage-variable]\n\n##### Other Istanbul Instrutrumenter options\n\nSee:\n- [istanbul Instrumenter documentation][istanbul-coverage-variable]\n\n\n### istanbul.summarizeCoverage(opt)\n\nget coverage summary details\n\n#### opt\nType: `Object` (optional)\n```js\n{\n  coverageVariable: 'someVariable'\n}\n```\n##### coverageVariable\nType: `String` (optional)\nDefault: `'$$cov_' + new Date().getTime() + '$$'`\n\nThe global variable istanbul uses to store coverage\n\nSee also:\n- [istanbul coverageVariable][istanbul-coverage-variable]\n- [SanboxedModule][sandboxed-module-coverage-variable]\n\n#### returns\nType: `Object`\n```js\n{\n  lines: { total: 4, covered: 2, skipped: 0, pct: 50 },\n  statements: { total: 4, covered: 2, skipped: 0, pct: 50 },\n  functions: { total: 2, covered: 0, skipped: 0, pct: 0 },\n  branches: { total: 0, covered: 0, skipped: 0, pct: 100 }\n}\n```\n\nSee also:\n- [istanbul utils.summarizeCoverage()][istanbul-summarize-coverage]\n\n\n### istanbul.writeReports(opt)\n\nCreate the reports on stream end.\n\n#### opt\nType: `Object` (optional)\n```js\n{\n  dir: './coverage',\n  reporters: [ 'lcov', 'json', 'text', 'text-summary' ],\n  reportOpts: { dir: './coverage' },\n  coverageVariable: 'someVariable'\n}\n```\n\n#### dir\nType: `String` (optional)\nDefault: `./coverage`\n\nThe folder in which the reports are to be outputted.\n\n#### reporters\nType: `Array` (optional)\nDefault: `[ 'lcov', 'json', 'text', 'text-summary' ]`\n\nThe list of reporters to use, one of:\n- 'clover'\n- 'cobertura'\n- 'html'\n- 'json'\n- 'lcov'\n- 'lcovonly'\n- 'none'\n- 'teamcity'\n- 'text'\n- 'text-summary'\n\nSee also `require('istanbul').Report.getReportList()`\n\n##### coverageVariable\nType: `String` (optional)\nDefault: `'$$cov_' + new Date().getTime() + '$$'`\n\nThe global variable istanbul uses to store coverage\n\nSee also:\n- [istanbul coverageVariable][istanbul-coverage-variable]\n- [SanboxedModule][sandboxed-module-coverage-variable]\n\nLicense\n------------\n\n[MIT License](http://en.wikipedia.org/wiki/MIT_License) (c) Simon Boudrias - 2013\n\n[istanbul]: http://gotwarlost.github.io/istanbul/\n[gulp]: https://github.com/gulpjs/gulp\n\n[npm-url]: https://npmjs.org/package/gulp-istanbul\n[npm-image]: https://badge.fury.io/js/gulp-istanbul.png\n\n[travis-url]: http://travis-ci.org/SBoudrias/gulp-istanbul\n[travis-image]: https://secure.travis-ci.org/SBoudrias/gulp-istanbul.png?branch=master\n\n[depstat-url]: https://david-dm.org/SBoudrias/gulp-istanbul\n[depstat-image]: https://david-dm.org/SBoudrias/gulp-istanbul.png\n\n[istanbul-coverage-variable]: http://gotwarlost.github.io/istanbul/public/apidocs/classes/Instrumenter.html\n[istanbul-summarize-coverage]: http://gotwarlost.github.io/istanbul/public/apidocs/classes/ObjectUtils.html#method_summarizeCoverage\n[sandboxed-module-coverage-variable]: https://github.com/felixge/node-sandboxed-module/blob/master/lib/sandboxed_module.js#L240\n",
  "readmeFilename": "README.md",
  "_id": "gulp-istanbul@0.2.2",
  "_from": "gulp-istanbul@"
}
